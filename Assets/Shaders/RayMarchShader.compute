// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<float> _VoxelBuffer;
RWTexture2D<float4> _RaymarchOutput;

//This will store the depth at which smoke was hit, will be needed to compare against the depth texture we get from the camera
RWTexture2D<float> _SceneDepthTexture;
SamplerState sampler_Depth;

int _OutputWidth;
int _OutputHeight;

// Voxel grid parameters
int _GridSizeX, _GridSizeY, _GridSizeZ;
float _VoxelSize;

// Camera parameters
float3 _CameraWorldPos;
float4x4 _CameraInvViewProjection;

// Raymarching settings
float _StepSize;
int _MaxSteps;

// Smoke properties
float4 _SmokeColor;

float4x4 _CameraViewMatrix;
float4x4 _CameraProjectionMatrix;
float4x4 _CameraInvProjectionMatrix;




float GetVoxelDensity(float3 pos)
{
    float3 minXYZ = float3(-1 * _GridSizeX / 4, 0, -1 * _GridSizeZ / 4);
    float3 shiftedPos = pos - minXYZ;
    int3 gridPos = floor(shiftedPos / _VoxelSize);
    

    if (gridPos.x < 0 || gridPos.y < 0 || gridPos.z < 0 ||
        gridPos.x >= _GridSizeX || gridPos.y >= _GridSizeY || gridPos.z >= _GridSizeZ)
    {
        return 0.0; // Out of bounds
    }
    
    int index = gridPos.x * (_GridSizeY * _GridSizeZ) + gridPos.y * _GridSizeZ + gridPos.z;

    return _VoxelBuffer[index * 5 + 3]; //Access the 4th float of the buffer DENSITY
}

//https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection.html
bool RayAABBIntersection(float3 rayOrigin, float3 rayDir, float3 minXYZ, float3 maxXYZ, out float tMin, out float tMax)
{
    //x values
    float tXMin = (minXYZ[0] - rayOrigin[0]) / rayDir[0];
    float tXMax = (maxXYZ[0] - rayOrigin[0]) / rayDir[0];
    
    if (tXMin > tXMax)
    {
        float copy = tXMin;
        tXMin = tXMax;
        tXMax = copy;
    }
    
    //y values
    float tYMin = (minXYZ[1] - rayOrigin[1]) / rayDir[1];
    float tYMax = (maxXYZ[1] - rayOrigin[1]) / rayDir[1];
    
    if (tYMin > tYMax)
    {
        float copy = tYMin;
        tYMin = tYMax;
        tYMax = copy;
    }
    
    if ((tXMin > tYMax) || (tYMin > tXMax))
        return false;
    
    if (tYMin > tXMin)
    {
        tMin = tYMin;
    }
    else
    {
        tMin = tXMin;
    }
    
    if (tYMax < tXMax)
    {
        tMax = tYMax;
    }
    else
    {
        tMax = tXMax;
    }

    //z values
    float tZMin = (minXYZ[2] - rayOrigin[2]) / rayDir[2];
    float tZMax = (maxXYZ[2] - rayOrigin[2]) / rayDir[2];
    
    if (tZMin > tZMax)
    {
        float copy = tZMin;
        tZMin = tZMax;
        tZMax = copy;
    }
    
    if ((tMin > tZMax) || (tZMin > tMax))
    {
        return false;
    }
    
    if (tZMin > tMin)
    {
        tMin = tZMin;
    }
    
    if (tZMax < tMax)
    {
        tMax = tZMax;
    }
    
    return true;
    
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    // Get screen-space UV coordinates, normalized position of pixel on the screen
    //Normalize pixel into [0,1] range
    float2 uv = id.xy / float2(_OutputWidth, _OutputHeight);

    // Create a ray for the current pixel
    float4 clipPos = float4(uv * 2 - 1, 1, 1);
    float4 worldPos = mul(_CameraInvViewProjection, clipPos);
    worldPos /= worldPos.w; // Perspective divide
    float3 rayDir = normalize(worldPos.xyz - _CameraWorldPos);
    
    
    // Initialize raymarching variables
    float3 rayPos = _CameraWorldPos;
    float3 color = float3(0.0, 0.0, 0.0); // Default black color
    float density = 0.0;

    //Can we optimize the ray march?
    //Instead of stepping through some amount of arbitrary steps
    //What if we take the first voxel we enter in the grid and the last voxel we enter in the grid
    //Then using voxel grid coordinates, we draw a line via Bresenham's algo
    //While drawing that line if we hit a voxel with smoke color the pixel
    for (int step = 0; step < _MaxSteps; step++)
    {
        //Very simple ray march, once we hit a voxel with density color it the smoke color
        // Move along the ray
        rayPos += rayDir * _StepSize;
        
        // Sample voxel density
        float voxelDensity = GetVoxelDensity(rayPos);
        
        if (voxelDensity > 0.0)
        {
            _RaymarchOutput[id.xy] = float4(_SmokeColor.rgb, 1.0f); 
            //For the pixel, at what depth did we hit the smoke?
            
            //Get in eye/view space
            //Why? Easier to compare against _CameraDepthTexture
            float4 eyePos4 = mul(_CameraViewMatrix, float4(rayPos, 1.0));
            float3 eyePos = eyePos4.xyz / eyePos4.w;
            _SceneDepthTexture[id.xy] = -eyePos.z;
            return; // Exit the loop 
        }
    }

    _RaymarchOutput[id.xy] = float4(color, 0.0);
    
    //We didn't hit any smoke, so the depth should be marked as 0 to note that
    _SceneDepthTexture[id.xy] = 0.0;
    
    //TEST LINE TO CHECK RAYMARCH OUTPUT TEXTURE
    //_RaymarchOutput[id.xy] = float4(rand(id.xy), rand(id.xy + 1), rand(id.xy + 2), 1.0);

}
